@implements IDisposable
@inject IUserService userService
@attribute [Authorize(Roles = "User")]

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""><span class="fas fa-futbol" aria-hidden="true"></span>&nbsp;FakeFutbin</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="fas fa-home" aria-hidden="true"></span>&nbsp;Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <PlayersByPositionNavMenu/>
        </div>
        <div class="nav-item px-3">
            <PlayerNationalitiesNavMenu/>
        </div>
        <div class="nav-item px-3 d-sm-none">
            <AuthorizeView Roles="User">
                    <Authorized>
                    <NavLink class="nav-link" href="User">
                        <span class="fa-solid fa-user" aria-hidden="true"></span>
                        &nbsp;@context.User.Identity.Name (Players: <b>@userPlayersCount</b>&nbsp;
                        Wallet: <b>@userWallet.ToString("C")</b>)
                    </NavLink>
                    <NavLink class="nav-link">
                        <LoginLogoutButton />
                    </NavLink>
                    </Authorized>
            </AuthorizeView>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private int userPlayersCount = 0;
    private int userWallet = 0;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        userService.OnUserChanged += UserChanged;
        userService.OnWalletChanged += WalletChanged;
    }
    private void UserChanged(int totalQty)
    {
        userPlayersCount = totalQty;
        StateHasChanged();
    }
    protected void WalletChanged(int wallet)
    {
        userWallet = wallet;
        StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        userService.OnUserChanged -= UserChanged;
        userService.OnWalletChanged -= WalletChanged;
    }

}
